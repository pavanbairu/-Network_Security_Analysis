name: workflows

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
        # Step 1: Checkout the code
      - name: checkout
        uses: actions/checkout@v3

        # Step 2: Linting Repository
      - name: lint code
        run: echo "Linting Repository"
        
        # step 3: Running Unit Tests
      - name: Run unit test
        run: echo "Running Unit Tests" 

  build-and-push:
    name: Continuous Delivery
    runs-on: ubuntu-latest
    needs: integration  # Depends on the Integration job

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build and push the Docker image to ECR
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          # Build the Docker image
          docker build -t $IMAGE_URI .
          
          # Push the Docker image to ECR
          docker push $IMAGE_URI
          
          # Output the image URI
          echo "::set-output name=image::$IMAGE_URI"

  Continuous-Deployment:
    name: Continuous Deployment
    needs: build-and-push # Depends on the build-and-push job
    runs-on: self-hosted
    steps:
        # Step 1: Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

        # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
        # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    
        # step 4: Downloads the latest version of the Docker image from the specified ECR repository.
      - name: Pull the latest Docker image from ECR
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        
        # step 5: Checks if a container repository is running, stops it, and removes it.
        # If no container is found, it skips this step without failing the job.
      - name: Stop and remove the old container if running
        run: |
          docker ps -q --filter "name=${{ secrets.ECR_REPOSITORY_NAME }}" | grep -q . && docker stop networksecurity && docker rm -fv networksecurity || echo "No existing container to stop"
        
        # step 6: Starts a new container with the latest image and maps it to port 8080.
        # Environment variables are passed for AWS credentials and region.
      - name: Run the new Docker image to serve users
        run: |
            docker run -d -p 8080:8080 --ipc="host" \
            --name=${{ secrets.ECR_REPOSITORY_NAME }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

        # step 7: Removes unused Docker resources (e.g., old images, stopped containers) to free up space.
        # Does not fail the job if there is nothing to clean.
      - name: Clean up unused Docker images and containers
        run: |
            docker system prune -af || echo "No unused images or containers to remove"
